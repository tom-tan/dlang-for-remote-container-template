name: Build containers

on:
  schedule:
    - cron:  '10 4 * * *'
  workflow_dispatch:
    inputs:
      force_rebuild:
        required: true
        default: 'false'
      dc:
        required: false
      version:
        required: false
      

jobs:
  build:
    # Prevent from building in cloned repos
    if: github.repository_owner == 'tom-tan'
    strategy:
      matrix:
        dc: [dmd, ldc, gdc]
        include:
          - dc: dmd
            arch: linux/amd64
          - dc: ldc
            arch: linux/amd64,linux/arm64
          - dc: gdc
            arch: linux/amd64
      fail-fast: false
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - run: echo "RANDOM_SUFFIX=${RANDOM}" >> $GITHUB_ENV
      - uses: actions/cache@v2
        with:
          path: ${{ github.workspace }}/dc-versions
          key: ${{ matrix.dc }}-${{ env.RANDOM_SUFFIX }}
          restore-keys: |
            ${{ matrix.dc }}-
      - id: get_release
        run: |
          if [ "${dc}" = dmd ]; then
            link=http://downloads.dlang.org/releases/LATEST
          elif [ "${dc}" = ldc ]; then
            link=https://ldc-developers.github.io/LATEST
          elif [ "${dc}" = gdc ]; then
            link=https://gdcproject.org/downloads/LATEST
          else
            echo "::error ::unknown 'dc': ${dc}"
            return 1
          fi

          latest=$(curl --connect-timeout 10 -fsSL $link)

          if [ -e $GITHUB_WORKSPACE/dc-versions/$dc ]; then
            cur="$(cat $GITHUB_WORKSPACE/dc-versions/$dc)"
          else
            cur=""
          fi
 
          if [ "$force_rebuild" = "true" ]; then
            if [ -z "$specified_dc" -o "$specified_dc" = "${dc}" ]; then
              if [ -n "$specified_dc" -a -z "$specified_ver" ]; then
                echo "::error ::'dc' is specified but 'version' is not"
                return 1
              elif [ -z "$specified_dc" -a -n "$specified_ver" ]; then
                echo "::error ::'dc' is not specified but 'version' is"
                return 1
              fi
              need_update=true
              target_ver="$specified_ver"
            else
              need_update=false
              latest=""
            fi
          elif [ -z "$latest" -o "$latest" = "$cur" ]; then
            need_update=false
            latest=""
          else
            need_update=true
            target_ver="$latest"
          fi
          echo "::set-output name=need_update::$need_update"
          echo "::set-output name=latest::$latest"
          echo "::set-output name=target_ver::$target_ver"

          echo "need_update? '$need_update', current: '$cur', latest: '$latest', target: '$target_ver'"
        env:
          dc: ${{ matrix.dc }}
          force_rebuild: ${{ github.event.inputs.force_rebuild }}
          specified_dc: ${{ github.event.inputs.dc }}
          specified_ver: ${{ github.event.inputs.version }}
      - name: Set up QEMU
        if: steps.get_release.outputs.need_update == 'true'
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        if: steps.get_release.outputs.need_update == 'true'
        uses: docker/setup-buildx-action@v1
      - name: Login to GitHub Container Registry
        if: steps.get_release.outputs.need_update == 'true'
        uses: docker/login-action@v1 
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: generate latest image name
        id: image_names
        run: |
          if [ "${{steps.get_release.outputs.target_ver}}" = "${{steps.get_release.outputs.latest}}" ]; then
            echo "::set-output name=latest_image::ghcr.io/${{ github.repository_owner }}/${{ matrix.dc }}:latest"
          else
            echo "::set-output name=latest_image::"
          fi
      - name: Build and push
        if: steps.get_release.outputs.need_update == 'true'
        uses: docker/build-push-action@v2
        with:
          context: .
          file: .devcontainer/Dockerfile
          platforms: ${{ matrix.arch }}
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/${{ matrix.dc }}:${{ steps.get_release.outputs.target_ver }}
            ${{ steps.image_names.outputs.latest_image }}
          build-args: |
            VARIANT=ubuntu-22.04
            DC_NAME=${{ matrix.dc }}
            DC_VERSION=${{ steps.get_release.outputs.target_ver }}
      - name: Cache latest version info
        if: steps.get_release.outputs.need_update == 'true' && steps.get_release.outputs.target_ver == steps.get_release.outputs.latest
        run: |
          mkdir -p $GITHUB_WORKSPACE/dc-versions
          echo $latest > $GITHUB_WORKSPACE/dc-versions/$dc
        env:
          dc: ${{ matrix.dc }}
          latest: ${{ steps.get_release.outputs.latest }}
